<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
]>
<rfc category="std" docName="draft-uma-resource-reg-v1-00.txt"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <front>
    <title abbrev="UMA Resource Registration">UMA Resource
    Registration</title>

    <author fullname="Christian Scholz" initials="C" role="editor"
            surname="Scholz">
      <organization>COM.lounge GmbH</organization>

      <address>
        <email>cs@comlounge.net</email>

        <uri>http://comlounge.net</uri>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <author fullname="Eve Maler" initials="E" surname="Maler">
      <organization>PayPal</organization>

      <address>
        <email>eve@xmlgrrl.com</email>

        <uri>http://www.paypal.com/</uri>
      </address>
    </author>

    <date day="2" month="December" year="2010" />

    <abstract>
      <t>This specification defines the resource registration protocol for
      User-Managed Access (UMA). This protocol provides a method for a host to
      register, update, check, and delete resource-related information at an
      authorization manager (AM) so that the user's resources can be put under
      scoped protection.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This specification defines the resource registration protocol for
      User-Managed Access (UMA). This protocol provides a method for a host to
      register, update, check, and delete resource-related information at an
      authorization manager (AM) so that the user's resources can be put under
      scoped protection.</t>

      <t>The host registers two kinds of information with the AM: information
      about resources to be protected and information about potential actions
      that can be performed on them.</t>

      <t>The host determines (unilaterally or as instructed by the user) the
      universe of resources belonging to this user that are to be protected by
      the AM. The host assigns a resource identifier to each set of one or
      more resources. Such a set might include a status update API endpoint,
      an individual status update, a single photo, a photo album, or even all
      photos with a particular user-assigned tag.</t>

      <t>The host also determines (often unilaterally based on its API
      features, but possibly with user input) the universe of actions that is
      possible for requesting parties to perform on each resource set. It
      assigns an action identifier to each. Such actions might involve
      "viewing", "adding", "printing", or whatever other actions the
      application supports for that resource set.</t>

      <t>Once this information is registered, the AM (under the authorizing
      user's instructions) is able to map particular authorization constraints
      to a specific set of resources and a specific set of actions. This
      mapping conceptually constitutes a "policy", and its resource+action
      component is involved in steps 2 and 3 of the UMA protocol as an
      analogue of the OAuth concept of "scope".</t>

      <t>Note that the host is free to offer the option to protect any subset
      of the user's resources using different AMs or other means entirely, or
      to protect some resources and not others; any such partitioning is
      outside the scope of this specification.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section title="Terminology">
        <t>See the core UMA protocol spec [[draft-uma-core]] for additional
        term definitions.</t>

        <t><list hangIndent="6" style="hanging">
            <t hangText="registration endpoint"><vspace /> A protected
            endpoint at the AM capable of receiving resource information from
            a host. [[Say it must be HTTPS?]]</t>

            <t hangText="resource set description"><vspace />A JSON-formatted
            data structure that represents a set of one or more resources to
            be AM-protected and maps possible actions to them.</t>

            <t hangText="action description">A JSON-formatted data structure
            that represents a possible action on a resource set.</t>
          </list></t>
      </section>

      <section title="Requirements Analysis">
        <t>This specification, in combination with the UMA core protocol, has
        been informed by the following resource registration
        requirements:<list style="symbols">
            <t>The authorizing user needs to be presented with a user
            interface that clearly indicates what resources and actions are
            available when they're setting and mapping authorization
            constraints at the AM.</t>

            <t>The AM therefore needs to acquire from the host some
            description of resources and actions to be protected, which
            includes enough information to display to the authorizing
            user.</t>

            <t>The requester needs to know what actions are possible on the
            resource it is trying to access. This requirement is considered
            out of scope; it is anticipated that host API documentation needs
            to picks up the slack.</t>

            <t>It must not be possible for the requester to be exposed to
            in-the-clear versions of identifiers for resources in case they
            compromise the authorizing user's privacy. For example, a
            protected set of resources might usefully but compromisingly be
            described as "racy photos from beach vacation". It is assumed that
            the host already has access to such a privacy-sensitive
            description and that the nature of the host-AM trust relationship
            forged by the authorizing user allows the AM to see this
            description as well.</t>

            <t>The AM needs to be told the relevant resource set, in
            host-described terms, that corresponds to the resource the
            requester is seeking access to so that it can assess the
            requesting party's request for an access token against the correct
            authorization constraints.</t>

            <t>The host therefore needs to tell the requester the relevant
            resource set -- and no more, for privacy reasons -- when the
            requester attempts access at the host and fails, so that the
            requester can convey it to the AM. [ISSUE: Should the host also
            hint at an appropriate action description, or since actions are
            supposed to be well-known should we leave it out?]</t>

            <t>The host needs to be able to validate that a requester's
            attempt at access in step 3, accompanied by an access token,
            matches the resource set and action set for which that access
            token was granted.</t>

            <t>The AM therefore needs to associate each requester access token
            with a resource set and action set. (Currently the UMA core
            protocol defines a run-time method for the host to ask the AM to
            confirm this match. An alternative solution that meets the
            requirement would be for the access token to securely contain this
            information.)</t>
          </list></t>
      </section>
    </section>

    <section title="Prerequisites">
      <t>In order for a host to be able to register resource information with
      an AM it needs to fulfill the following prerequisites:<list
          style="symbols">
          <t>The host has obtained a host access token from the AM as
          explained in UMA core protocol step 1. It MUST use this token to use
          the registration API of the AM.</t>

          <t>The host has obtained the URI of the registration API endpoint as
          part of the AM's metadata as described in UMA protocol step 1.</t>

          <t>The host has already defined, for its own use, sets of resources
          and possible actions applicable to this user, along with associated
          identifiers for them and details about them that will help the user
          in correctly setting policy over them at the AM.</t>
        </list></t>
    </section>

    <section title="Action and Resource Set Descriptions">
      <t>The host registers information with an AM in JSON [[cite]] form. The
      information is of two types: action descriptions and resource set
      descriptions.</t>

      <t>An action description is an object with the following
      parameters:<list style="hanging">
          <t hangText="name">A human-readable string describing the action.
          REQUIRED.</t>

          <t hangText="icon_uri">A URI for a graphic icon representing the
          action. OPTIONAL.</t>
        </list></t>

      <figure>
        <preamble>For example:</preamble>

        <artwork><![CDATA[{
        "action":
            {
            "name": "Read",
            "icon_uri": "http://www.example.com/icons/reading-glasses"
        }
}]]></artwork>
      </figure>

      <t>A resource set description is an object with the following
      parameters:<list style="hanging">
          <t hangText="name">A human-readable string describing a set of one
          or more resources. REQUIRED.</t>

          <t hangText="icon_uri">A URI for a graphic icon representing the
          resource set. OPTIONAL.</t>

          <t hangText="actions">An array listing one or more identifiers of
          actions that are permissible on this resource set. The action
          identifiers MUST correspond to actions registered by this host for
          this user at this AM. See section [[cite]] below for how action
          identifiers are created.</t>
        </list></t>

      <figure>
        <preamble>For example:</preamble>

        <artwork><![CDATA[{
        "resource":
            {
            "name": "Photo album",
            "icon_uri": "http://www.example.com/icons/flower",
            "actions": ["read", "update", "print"]
        }
}]]></artwork>
      </figure>
    </section>

    <section title="Registration API">
      <t>The host uses a RESTful API at the AM's registration URI to create,
      read, update, and delete resource set and action descriptions, along
      with listing groups of such descriptions. The host MUST use its host
      access token obtained previously in UMA protocol step 1 to gain access
      to the API.</t>

      <t>Individual resource set descriptions are managed at URIs with this
      structure:
      "{reguri}/host/{hostid}/user/{userid}/resource/{resourceid}"</t>

      <t>Individual action descriptions are managed at URIs with this
      structure: "{reguri}/host/{hostid}/user/{userid}/action/{actionid}"</t>

      <t>The components of these URIs are defined as follows:<list
          style="hanging">
          <t hangText="{reguri}">The AM's registration URI as advertised in
          its metadata (defined in UMA protocol step 1).</t>

          <t hangText="{hostid}">A registration area at the AM that is
          specific to this host.</t>

          <t hangText="{userid}">The portion of the host's registration area
          at this AM that is specific to this user.</t>

          <t hangText="{actionid}">An identifier for an action description,
          assigned during description document creation (see section [[cite]]
          below). The identifier has meaning only to the host. Without a
          specific action identifier, the URI applies to the set of action
          descriptions already registered.</t>

          <t hangText="{resourceid}">An identifier for a resource set
          description, assigned during description document creation (see
          section [[cite]] below). The identifier has meaning only to the
          host. Without a specific resource identifier, the URI applies to the
          set of resource set descriptions already registered.</t>
        </list></t>

      <t>The host MUST register at least action description and one resource
      set description (with a valid referenced {actionid}).</t>

      <t>Following is a summary of registration API operations. Each is
      defined in its own section below.<list style="symbols">
          <t>Create action description: PUT
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Read action description: GET
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Update action description: PUT
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Delete action description: DELETE
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>List action descriptions: GET
          /host/{hostid}user/{userid}/action/</t>

          <t>Create resource set description: PUT
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Read resource set description: GET
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Update resource set description: PUT
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Delete resource set description: DELETE
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>List resource set descriptions: GET
          /host/{hostid}user/{userid}/resource/</t>
        </list></t>

      <section title="Create Action Description">
        <t>Adds a new action description using the PUT method. The host
        assigns a unique identifier to the action. The host is free to use its
        own methods of identifying and describing actions; the AM MUST treat
        them as opaque for the purpose of authorizing access.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
...

(Body contains the JSON representation of the action description to be created.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
Location: (URL of the created action, same as that which was PUT.)
...]]></artwork>
        </figure>
      </section>

      <section title="Read Action Description">
        <t>Reads a previously registered action description using the GET
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/action/{actionid} HTTP/1.1
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
ETag: (entity tag of the action artifact)
...

(Body contains JSON representation of action description.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>
      </section>

      <section title="Update Action Description">
        <t>Updates a previously registered action description using the PUT
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[UT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
If-Match: (entity tag of the action if operation is to be idempotent)
...

(Body contains JSON representation of action description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[UT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
If-Match: (entity tag of the action if operation is to be idempotent)
...

(Body contains JSON representation of action description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="Delete Action Description">
        <t>Deletes a previously registered action description using the DELETE
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[DELETE /host/{hostid}/user/{userid}/action/{actionid}
If-Match: (entity tag of the action if operation is to be idempotent)
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[TP/1.1 404 Not Found
...

(The body provides user-readable explanation of the error.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="List Action Descriptions">
        <t>Lists all previously registered action descriptions for this user
        using the GET method. The list is in the form of a JSON array of
        {actionid} values.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/action/
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response:</preamble>

          <artwork><![CDATA[TTP/1.1 200 OK
Content-Type: application/json
...

(Body contains JSON array of {actionid} values.)]]></artwork>
        </figure>
      </section>

      <section title="Create Resource Set Description">
        <t>Adds a new resource set description using the PUT method. The host
        assigns a unique identifier to the action. The host is free to use its
        own methods of identifying and describing resource sets; the AM MUST
        treat them as opaque for the purpose of authorizing access.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/resource/{resourceid}
Content-Type: application/json
...

(Body contains JSON representation of resource set description to be created.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
Location: (URL of the created resource, same as that which was PUT.)
...]]></artwork>
        </figure>
      </section>

      <section title="Read Resource Set Description">
        <t>Reads a previously registered resource set description using the
        GET method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/resource/{resourceid} HTTP/1.1
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
ETag: (entity tag of the resource artifact)
...

(Body contains JSON representation of the resource set description.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>
      </section>

      <section title="Update Resource Set Description">
        <t>Updates a previously registered resource set description using the
        PUT method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/resource/{resourceid}
Content-Type: application/json
If-Match: (entity tag of the resource if operation is to be idempotent)
...

(Body contains JSON representation of resource set description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No Content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="Delete Resource Set Description">
        <t>Deletes a previously registered resource set description using the
        DELETE method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[DELETE /host/{hostid}/user/{userid}/resource/{resourceid}
If-Match: (entity tag of the resource if operation to be idempotent)
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="List Resource Set Descriptions">
        <t>Lists all previously registered resource set descriptions for this
        user using the GET method. The list is in the form of a JSON array of
        {resourceid} values.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/resource/
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

(Body contains JSON array of {resourceid} values.)]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Security Considerations">
      <t>[To be supplied. Use of HTTPS, requirement for host access token,
      etc.]</t>
    </section>

    <section title="TODOs">
      <t><list style="symbols">
          <t>Incorporate a reference to this spec in the core protocol spec,
          and state whether it is optional and what should happen if it's
          optional and not done. Should the sentence above about a requirement
          to register at least one of each kind of description appear here, or
          in the core spec (assuming it's correct)?</t>

          <t>Change the "resource" registration URI in the core spec to just a
          "registration" URI.</t>

          <t>Flesh out citations and fix references section.</t>

          <t>Flesh out security considerations section.</t>

          <t>Add privacy considerations section?</t>

          <t>Require HTTPS for API interactions? If so, mention both here and
          in core spec?</t>

          <t>Consider the question of i18n of resource set and action "name"
          strings.</t>

          <t>Consider the question of whether to explicitly allow description
          extensions.</t>

          <t>How and when does the /host/{hostid} path component get
          created?</t>

          <t>How and when does the /user/{userid} path component get created?
          Are there privacy considerations around the userid?</t>

          <t>Would implementers expect the "list all" methods to return just a
          list of IDs, or the whole set of structures?</t>

          <t>Here or in the core spec, we have to say how a {resourceid} plus
          one or more {actionid}s gets used and flows around as normal OAuth
          scope information. Base64-encode a JSON representation? Something
          else?</t>
        </list></t>
    </section>

    <section title="Acknowledgments">
      <t><list style="symbols">
          <t>Paul Bryan</t>

          <t>[Others TBS]</t>
        </list></t>
    </section>

    <section title="Document History">
      <t>[[ to be removed by RFC editor before publication as an RFC ]]</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-hammer-hostmeta-13.xml'?>

      <!--
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5785.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3023.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>
-->
    </references>
  </back>
</rfc>
