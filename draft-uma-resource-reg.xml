<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
]>
<rfc category="std" docName="draft-uma-resource-reg" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <front>
    <title abbrev="UMA Resource Registration">UMA Resource
    Registration</title>

    <author fullname="Christian Scholz" initials="C" role="editor"
            surname="Scholz">
      <organization>COM.lounge GmbH</organization>

      <address>
        <email>cs@comlounge.net</email>

        <uri>http://comlounge.net</uri>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <author fullname="Eve Maler" initials="E" surname="Maler">
      <address>
        <email>eve@xmlgrrl.com</email>
      </address>
    </author>

    <author fullname="Paul Bryan" initials="P" surname="Bryan">
      <organization>P. Bryan Consulting</organization>

      <address>
        <email>email@pbryan.net</email>
      </address>
    </author>

    <date day="30" month="December" year="2010" />

    <abstract>
      <t>This specification defines the resource registration protocol for
      User-Managed Access (UMA). This protocol provides a method for a host to
      register, update, check, and delete resource-related information at an
      authorization manager (AM) so that the user's resources can be put under
      scoped protection.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This specification defines the resource registration protocol for
      User-Managed Access (<xref target="draft-uma-core">UMA</xref>). This
      protocol provides a method for a host to register, update, check, and
      delete resource-related information at an authorization manager (AM) so
      that the user's resources can be put under scoped protection.</t>

      <t>(Intellectual property notice: The User-Managed Access Work Group
      operates under <eref
      target="http://kantarainitiative.org/confluence/display/GI/Option+Patent+and+Copyright+%28RAND%29">Kantara
      IPR Policy - Option Patent &amp; Copyright: Reciprocal Royalty Free with
      Opt-Out to Reasonable And Non discriminatory (RAND)</eref> and the
      publication of this document is governed by the policies outlined in
      this option.)</t>

      <t>The host registers two kinds of information with the AM: information
      about resources to be protected and information about potential actions
      that can be performed on them.</t>

      <t>The host determines (unilaterally or as instructed by the user) the
      universe of resources belonging to this user that are to be protected by
      the AM, and assigns a resource identifier to each set of one or more
      resources. Such a set might include a status update API endpoint, an
      individual status update, a single photo, a photo album, or even all
      photos with a particular user-assigned tag.</t>

      <t>The host also determines (often unilaterally based on its API
      features, but possibly with user input) the universe of actions that is
      possible for requesting parties to perform on each resource set, and
      assigns an action identifier to each. Such actions might involve
      "viewing", "adding", "printing", or whatever other actions the
      application supports for that resource set.</t>

      <t>Once the host has registered these identifiers and other descriptive
      information with the AM, the AM (under the authorizing user's
      instructions) is able to map particular authorization constraints to a
      particular set of resources and a particular set of actions. This
      mapping conceptually constitutes a "policy", and its
      resource-set-and-actions component is involved in steps 2 and 3 of the
      UMA protocol as an analogue of the OAuth concept of "scope".</t>

      <t>Note that the host is free to offer the option to protect any subset
      of the user's resources using different AMs or other means entirely, or
      to protect some resources and not others; any such partitioning is
      outside the scope of this specification.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section title="Terminology">
        <t>See <xref target="draft-uma-core">UMA</xref> for additional term
        definitions.</t>

        <t><list hangIndent="6" style="hanging">
            <t hangText="registration endpoint"><vspace />A protected endpoint
            at the AM capable of receiving resource information from a
            host.</t>

            <t hangText="resource set description"><vspace />A JSON-formatted
            data structure that represents a set of one or more resources to
            be AM-protected and maps possible actions to them.</t>

            <t hangText="action description">A JSON-formatted data structure
            that represents a possible action on a resource set.</t>
          </list></t>
      </section>

      <section title="Requirements Analysis">
        <t>This specification, in combination with the UMA core protocol
        specification and the scoped-access specification, has been informed
        by the following resource registration requirements:<list
            style="symbols">
            <t>The authorizing user needs to be presented with a user
            interface that clearly indicates what resources and actions are
            available when they're setting and mapping authorization
            constraints at the AM. (User interface considerations are out of
            scope of UMA protocol specifications, but this requirement has
            protocol dependencies.)</t>

            <t>The AM therefore needs to acquire from the host some
            description of resources and actions to be protected, which
            includes enough information to display to the authorizing user.
            (Solved by this specification.)</t>

            <t>The requester should not be exposed to in-the-clear versions of
            identifiers for resources in case they compromise the authorizing
            user's privacy. For example, a protected set of resources might
            usefully but compromisingly be described as "racy photos from
            beach vacation". It is assumed that the host already has access to
            such a description and that the nature of the host-AM trust
            relationship forged by the authorizing user may qualify the AM to
            see this description as well. (Solved by this specificationl.)</t>

            <t>The AM needs to be told the relevant resource set, in
            host-described terms, that corresponds to the resource the
            requester is seeking access to so that it can assess the
            requesting party's request for an access token against the correct
            authorization constraints. (Solved by the scoped-access
            specification.)</t>

            <t>The host therefore needs to tell the requester the relevant
            resource set -- and no more, for privacy reasons -- when the
            requester attempts access at the host and fails, so that the
            requester can convey it to the AM. (Solved by the scoped-access
            specification.)</t>

            <t>The host needs to be able to validate that a requester's
            attempt at access in step 3, accompanied by an access token,
            matches the resource set and action set for which that access
            token was granted. (Solved by the scoped-access
            specification.)</t>

            <t>The AM therefore needs to associate each requester access token
            with a resource set and action set. (Solved by the core protocol
            specification. Currently it defines a run-time method for the host
            to ask the AM to confirm this match. An alternative solution that
            meets the requirement would be for the access token to securely
            contain this information.)</t>

            <t>The requester needs to know what actions are possible on the
            resource it is trying to access. (This requirement is considered
            out of scope for UMA; it is anticipated that host API
            documentation will pick up the slack.)</t>
          </list></t>
      </section>
    </section>

    <section title="Prerequisites">
      <t>In order for a host to be able to register resource information with
      an AM it needs to fulfill the following prerequisites:<list
          style="symbols">
          <t>The host has obtained a host access token from the AM as
          explained in UMA core protocol step 1.</t>

          <t>The host has obtained the URI of the registration API endpoint as
          part of the AM's metadata as described in UMA protocol step 1.</t>

          <t>The host has already defined, for its own use, sets of resources
          and possible actions applicable to this user, along with associated
          identifiers for them and details about them that will help the user
          in correctly setting policy over them at the AM.</t>
        </list></t>
    </section>

    <section title="Example">
      <t>The following example illustrates the intent and usage of the
      resource registration protocol.</t>

      <t>This example contains some steps that are exclusively in the realm of
      user experience rather than web protocol, to achieve realistic
      illustration; these steps are labeled "User experience only". Some other
      steps are exclusively internal to the operation of the entity being
      discussed; these are labeled "Internal only".</t>

      <t>A user, Alice Adams, has just uploaded a photo of her new puppy to a
      host, Photoz.com, and wants to ensure that this specific photo is not
      publicly accessible.</t>

      <t>Alice has already introduced this host to her AM, CopMonkey.com, and
      thus Photoz has already obtained an OAuth client ID and an UMA host
      access token from CopMonkey. However, Alice has not previously
      instructed Photoz to use CopMonkey to protect any other photos of
      hers.</t>

      <t>Alice has previously visited CopMonkey to map a default "do not share
      with anyone" authorization constraint to any resource sets registered by
      Photoz, until such time as she maps some other less-Draconian
      constraints to those resources. (User experience only; this may have
      been done at the time Alice introduced the host to the AM, and/or it
      could have been a global or host-specific preference setting.) Other
      kinds of constraints she may eventually map to particular photos or
      albums might be "Share only with husband@email.com" or "Share only with
      people in my 'family' group".</t>

      <t>Photoz itself has an API that allows for photo viewing and printing.
      It defines for itself, and for applications using that API, actions
      applicable to photos that are accessed by authorized third parties
      (internal only; this is comparable to determining and documenting OAuth
      scopes).</t>

      <t>While visiting Photoz, Alice selects a link or button that instructs
      the site to "Protect" or "Share" this single photo (user experience
      only; Photoz could have made this a default or preference setting).
      Photoz defines for itself a resource set that represents this photo
      (internal only; Photoz is the only application that knows how to map a
      particular photo URL to a particular resource set).</t>

      <t>Photoz prepares the following two action descriptions, which are
      probably standard for this site across all of its users. The "name"
      parameter values are intended to be used by Alice (and similarly by
      other users of the same site) in mapping authorization constraints to
      specific resource sets and actions when she visits CopMonkey, such that
      Alice would see the strings "View" and "Print", likely accompanied by
      the referenced icons, when she visits there. </t>

      <figure>
        <artwork><![CDATA[{
        "action":
            {
            "name": "View",
            "icon_uri": "http://www.example.com/icons/reading-glasses"
        }
}]]></artwork>
      </figure>

      <figure>
        <artwork><![CDATA[{
        "action":
            {
            "name": "Print",
            "icon_uri": "http://www.example.com/icons/printer"
        }
}]]></artwork>
      </figure>

      <t>Photoz uses the "create action description" method of CopMonkey's
      resource registration API, presenting its Alice-specific host access
      token there, to register and assign identifiers to these action
      descriptions. The "com.photoz" path component reflects Photz's unique
      host identifier (its OAuth client ID). Since this is Photoz's first-ever
      use of this API, the "ABCD001" path component has the effect of
      assigning a unique identifier to an Alice-specific area underneath
      Photoz's host registration area. The "view" and "print" path components,
      respectively, assign unique identifiers to these action descriptions
      that can then be referenced in resource set descriptions. (Photoz likely
      could have registered action descriptions at any time upon being
      introduced to CopMonkey by Alice.) @@should we prepare for actions to be
      reusable across users by allowing/requiring them to be registered
      "above" the user-specific level? @@show token being used etc. in the
      method?</t>

      <figure>
        <artwork><![CDATA[PUT /host/com.photoz/user/ABCD001/action/view
Content-Type: application/json
...

{
        "action":
            {
            "name": "View",
            "icon_uri": "http://www.example.com/icons/reading-glasses"
        }
}]]></artwork>
      </figure>

      <figure>
        <artwork><![CDATA[PUT /host/com.photoz/user/ABCD001/action/print
Content-Type: application/json
...

{
        "action":
            {
            "name": "Print",
            "icon_uri": "http://www.example.com/icons/printer"
        }
}]]></artwork>
      </figure>

      <t>When Alice indicates she wants to protect her puppy photo, Photoz
      prepares the following resource set description, which is specific to
      Alice and her photo. The "name" parameter value is intended to be used
      by Alice in mapping authorization constraints to specific resource sets
      and actions when she visits CopMonkey, such that Alice would see the
      string "Steve the puppy!", likely accompanied by the referenced icon,
      when she visits there. The possible actions on this resource set are
      indicated with references to the identifiers of the action descriptions,
      as defined just above.</t>

      <figure>
        <artwork><![CDATA[{
        "resource_set":
            {
            "name": "Steve the puppy!",
            "icon_uri": "http://www.example.com/icons/flower",
            "actions": ["view", "print"]
        }
}]]></artwork>
      </figure>

      <t>Photoz uses the "create resource set description" method of
      CopMonkey's resource registration API, presenting its Alice-specific
      host access token there, to register and assign an identifier to the
      resource set description. The "00001" path component assigns an
      identifier that does not reveal any of Alice's personal information to
      an outsider but allows Photoz to know that it is the "Steve the puppy!"
      photo being referred to. @@show token being used etc. in the method?</t>

      <figure>
        <artwork><![CDATA[PUT /host/com.photoz/user/ABCD001/resource/00001
Content-Type: application/json
...

{
        "resource_set":
            {
            "name": "Steve the puppy!",
            "icon_uri": "http://www.example.com/icons/flower",
            "actions": ["view", "print"]
        }
}]]></artwork>
      </figure>

      <t>Once these descriptions have been successfully registered, Photoz is
      responsible for responding to requesters' attempts to access this photo
      in the manner described in <xref target="draft-uma-core">UMA</xref>,
      achieving protection of the resource by "outsourcing" this task to
      CopMonkey.</t>

      <t>Photoz can choose to redirect Alice to CopMonkey for further
      authorization constraint mapping, access auditing, and other AM-related
      tasks (user experience only).</t>

      <t>Over time, as Alice uploads other photos and creates and organizes
      photo albums, and as Photoz makes new action functionality available,
      Photoz can use additional methods of the resource registration API to
      ensure that CopMonkey's understanding of Alice's protected resources
      matches its own.</t>
    </section>

    <section title="Action and Resource Set Descriptions">
      <t>The host registers resource information with an AM in <xref
      format="default" target="RFC4627">JSON</xref> form. The information is
      of two types: action descriptions and resource set descriptions. The act
      of registering a description creates a unique identifier for it; see
      <xref target="reg-api"></xref> for more information.</t>

      <t>An action description is an object with the name "action" and with
      the following parameters:<list style="hanging">
          <t hangText="name">REQUIRED. A human-readable string describing the
          action. The AM SHOULD use the name in its user interface to assist
          the user in mapping authorization constraints to resource sets with
          this permissible action.</t>

          <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
          representing the action. If provided, the AM SHOULD use the
          referenced icon in its user interface to assist the user in mapping
          authorization constraints to resource sets with this permissible
          action.</t>
        </list></t>

      <figure>
        <preamble>For example, this description characterizes an action that
        involves reading or viewing resources (vs., say, creating them or
        changing them in some fashion):</preamble>

        <artwork><![CDATA[{
        "action":
            {
            "name": "Reading",
            "icon_uri": "http://www.example.com/icons/reading-glasses"
        }
}]]></artwork>
      </figure>

      <t>A resource set description is an object with the name "resource_set"
      and with the following parameters:<list style="hanging">
          <t hangText="name">REQUIRED. A human-readable string describing a
          set of one or more resources. The AM SHOULD use the name in its user
          interface to assist the user in mapping authorization constraints to
          this resource set.</t>

          <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
          representing the resource set. If provided, the AM SHOULD use the
          referenced icon in its user interface to assist the user in mapping
          authorization constraints to this resource set.</t>

          <t hangText="actions">REQUIRED. An array referencing one or more
          identifiers of actions that are permissible on this resource set.
          Each action identifier MUST correspond to an action registered by
          this host for this user at this AM.</t>
        </list></t>

      <figure>
        <preamble>For example, this description characterizes a resource set
        (a photo album and all of its contined photos) that can potentially be
        read, updated, or printed by those seeking access to it; the actions
        listed are citations to identifiers created during earlier
        registration of these action descriptions:</preamble>

        <artwork><![CDATA[{
        "resource_set":
            {
            "name": "Photo album",
            "icon_uri": "http://www.example.com/icons/flower",
            "actions": ["read", "update", "print"]
        }
}]]></artwork>
      </figure>

      <t>Both action descriptions and resource set descriptions MAY contain
      extension parameters that are not defined in this specification. The
      names of extension parameters MUST begin with "x-".</t>
    </section>

    <section anchor="reg-api" title="Resource Registration API">
      <t>The host uses a RESTful API at the AM's host_registration_uri to
      create, read, update, and delete resource set and action descriptions,
      along with listing groups of such descriptions. The host MUST use its
      valid host access token obtained previously in UMA protocol step 1 to
      gain access to the API.</t>

      <t>Individual resource set descriptions are managed at URIs with this
      structure:
      "{reguri}/host/{hostid}/user/{userid}/resource/{resourceid}"</t>

      <t>Individual action descriptions are managed at URIs with this
      structure: "{reguri}/host/{hostid}/user/{userid}/action/{actionid}"</t>

      <t>The components of these URIs are defined as follows:<list
          style="hanging">
          <t hangText="{reguri}">The AM's host_registration_uri as advertised
          in its metadata. This endpoint, its security requirements, and its
          requirements around advertisement in metadata are defined in UMA
          protocol step 1 (see <xref target="draft-uma-core">UMA</xref>).</t>

          <t hangText="{hostid}">A registration area at the AM that is
          specific to this host. The host MUST use the OAuth client identifier
          it was assigned by this AM as its host identifier. If the host
          identifier does not match the host access token used at the host
          registration endpoint, the AM MUST report an HTTP 403 Forbidden
          error (see example below) and fail to act on the request.</t>

          <t hangText="{userid}">The portion of the host's registration area
          at this AM that is specific to this user, assigned during
          registration of the first description for this user. The host MAY
          use any identifier scheme to represent each of its users uniquely,
          but for privacy, it is RECOMMENDED that the host assign an
          identifier that is both specific to this AM and obscured with
          respect to any identifier by which the user may be publicly known at
          this host. The host MAY change a user's identifier at any time by
          deleting registered resources under one identifier and
          re-registering them under another.</t>

          <t hangText="{actionid}">An identifier for an action description,
          assigned during initial registration of this description. Without a
          specific action identifier path component, the URI applies to the
          set of action descriptions already registered. The identifier has
          meaning only to the host.</t>

          <t hangText="{resourceid}">An identifier for a resource set
          description, assigned during initial registration of this
          description. Without a specific resource identifier path component,
          the URI applies to the set of resource set descriptions already
          registered. The identifier has meaning only to the host. The host
          MAY use any identifier scheme to represent each resource set
          uniquely for each user, including using a URL-formatted string that
          corresponds directly to a URL that can be used by authorized parties
          to retrieve the resource. However, for privacy, it is RECOMMENDED
          that the host assign an identifier that is obscured with respect to
          any human-readable resource set label used at this host.</t>
        </list></t>

      <t>The host MUST register at least action description and one resource
      set description (with a valid referenced {actionid}).</t>

      <t>Following is a summary of supported registration API operations. Each
      is defined in its own section below. All other methods are
      unsupported.<list style="symbols">
          <t>Create action description: PUT
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Read action description: GET
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Update action description: PUT
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>Delete action description: DELETE
          /host/{hostid}/user/{userid}/action/{actionid}</t>

          <t>List action descriptions: GET
          /host/{hostid}user/{userid}/action/</t>

          <t>Create resource set description: PUT
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Read resource set description: GET
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Update resource set description: PUT
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>Delete resource set description: DELETE
          /host/{hostid}/user/{userid}/resource/{resourceid}</t>

          <t>List resource set descriptions: GET
          /host/{hostid}user/{userid}/resource/</t>
        </list></t>

      <t>The AM MUST respond to host requests using HTTP methods other than
      those listed with an HTTP 403 Forbidden error and fail to act on the
      request.</t>

      <figure>
        <preamble>HTTP response (unsupported method or host ID not matching
        the presented host access token):</preamble>

        <artwork><![CDATA[HTTP/1.1 403 Forbidden
...

(Body provides user-readable explanation of the error.)]]></artwork>
      </figure>

      <section title="Create Action Description">
        <t>Adds a new action description using the PUT method. The host
        assigns a unique identifier to the action. The host is free to use its
        own methods of identifying and describing actions; the AM MUST treat
        them as opaque for the purpose of authorizing access.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
...

(Body contains the JSON representation of the action description to be created.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
Location: (URL of the created action, same as that which was PUT.)
...]]></artwork>
        </figure>
      </section>

      <section title="Read Action Description">
        <t>Reads a previously registered action description using the GET
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/action/{actionid} HTTP/1.1
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
ETag: (entity tag of the action artifact)
...

(Body contains JSON representation of action description.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>
      </section>

      <section title="Update Action Description">
        <t>Updates a previously registered action description using the PUT
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
If-Match: (entity tag of the action if operation is to be idempotent)
...

(Body contains JSON representation of action description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/action/{actionid}
Content-Type: application/json
If-Match: (entity tag of the action if operation is to be idempotent)
...

(Body contains JSON representation of action description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="Delete Action Description">
        <t>Deletes a previously registered action description using the DELETE
        method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[DELETE /host/{hostid}/user/{userid}/action/{actionid}
If-Match: (entity tag of the action if operation is to be idempotent)
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[TP/1.1 404 Not Found
...

(The body provides user-readable explanation of the error.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="List Action Descriptions">
        <t>Lists all previously registered action descriptions for this user
        using the GET method. The list is in the form of a JSON array of
        {actionid} values.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/action/
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

(Body contains JSON array of {actionid} values.)]]></artwork>
        </figure>
      </section>

      <section title="Create Resource Set Description">
        <t>Adds a new resource set description using the PUT method. The host
        assigns a unique identifier to the action. The host is free to use its
        own methods of identifying and describing resource sets; the AM MUST
        treat them as opaque for the purpose of authorizing access. On
        successfully registering a resource set, the host MUST use UMA
        mechanisms to limit access to any resources corresponding to this
        resource set, as defined in <xref target="draft-uma-core">UMA</xref>.
        @@Specify error to produce if referenced actions are incorrect?</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/resource/{resourceid}
Content-Type: application/json
...

(Body contains JSON representation of resource set description to be created.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
Location: (URL of the created resource, same as that which was PUT.)
...]]></artwork>
        </figure>
      </section>

      <section title="Read Resource Set Description">
        <t>Reads a previously registered resource set description using the
        GET method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/resource/{resourceid} HTTP/1.1
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
ETag: (entity tag of the resource artifact)
...

(Body contains JSON representation of the resource set description.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>
      </section>

      <section title="Update Resource Set Description">
        <t>Updates a previously registered resource set description using the
        PUT method. @@Specify error to produce if referenced actions are
        incorrect?</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[PUT /host/{hostid}/user/{userid}/resource/{resourceid}
Content-Type: application/json
If-Match: (entity tag of the resource if operation is to be idempotent)
...

(Body contains JSON representation of resource set description to be updated.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No Content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="Delete Resource Set Description">
        <t>Deletes a previously registered resource set description using the
        DELETE method.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[DELETE /host/{hostid}/user/{userid}/resource/{resourceid}
If-Match: (entity tag of the resource if operation to be idempotent)
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (success):</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No content
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (not found):</preamble>

          <artwork><![CDATA[HTTP/1.1 404 Not Found
...

(Body provides user-readable explanation of the error.)]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response (entity tag does not match):</preamble>

          <artwork><![CDATA[HTTP/1.1 412 Precondition failed
...]]></artwork>
        </figure>
      </section>

      <section title="List Resource Set Descriptions">
        <t>Lists all previously registered resource set descriptions for this
        user using the GET method. The list is in the form of a JSON array of
        {resourceid} values.</t>

        <figure>
          <preamble>HTTP request:</preamble>

          <artwork><![CDATA[GET /host/{hostid}/user/{userid}/resource/
...]]></artwork>
        </figure>

        <figure>
          <preamble>HTTP response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

(Body contains JSON array of {resourceid} values.)]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Security Considerations">
      <t>This specification relies mainly on OAuth security mechanisms for
      protecting the host registration endpoint at the AM so that only a
      properly authorized host can access it on behalf of the intended user.
      For example, the host needs to use a valid host access token issued
      through a user authorization process at the endpoint, and the
      interaction should take place over TLS. It is expected that the host
      will protect its client secret (if it was issued one) and will protect
      its host access token, particularly if used in "bearer token"
      fashion.</t>

      <t>In addition, this specification dictates a binding between the host
      access token and the host-specific registration area on the AM to
      prevent a host from interacting with a registration area not its
      own.</t>
    </section>

    <section title="Privacy Considerations">
      <t>The AM comes to be in possession of information (such as names and
      icons) that may reveal information about the user, which the AM's trust
      relationship with the host is assumed to accommodate. However, the
      requester is a less-trusted party (in fact, entirely untrustworthy until
      it acquires a requester access token in UMA protocol step 2). This
      specification recommends obscuring user identifiers and resource set
      identifiers in order to avoid leaking personally identifiable
      information to requesters through the "scope" mechanism.</t>
    </section>

    <section title="TODOs">
      <t><list style="symbols">
          <t>Consider the question of i18n of resource set and action "name"
          strings in addition to the extension-parameter mechanism.</t>

          <t>Would implementers expect the "list all" methods to return just a
          list of IDs, or the whole set of structures? If so, do this through
          a query parameter? E.g., "?mode={short|verbose}"</t>

          <t>Should resource set descriptions list action identifiers, as
          currently specified, or full action description URLs?</t>

          <t>Should it be possible for a host to tell an AM that it uses some
          standard set of actions, indicating them by reference, rather than
          providing descriptions of its supported actions by value?</t>

          <t>Reconsider the issue of including the ID in-band (possibly with
          the magic "_id" parameter) as well as out-of-band - given that the
          host creates these resources at the AM, can this be spec'd
          properly?</t>
        </list></t>
    </section>

    <section title="Acknowledgments">
      <t><list style="symbols">
          <t>[TBS]</t>
        </list></t>
    </section>

    <section title="Document History">
      <t>Changes in 30 Dec 2010 version:<list style="symbols">
          <t>Unsupported HTTP methods in registration API return 403</t>

          <t>Folded error section in to API section and changed from UMA-level
          error to 403</t>

          <t>Changed name of "resource" parameter to "resource_set"</t>

          <t>Added TODO issue about referencing standard sets of actions and
          reconsidering in-band IDs, and cleaned up the TODO list
          generally</t>

          <t>Fleshed out citations and requirements analysis</t>

          <t>Added huge worked-example section at the beginning (which
          contains issues not yet captured in the TODO section)</t>
        </list></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="RFC4627">
        <front>
          <title>The application/json Media Type for JavaScript Object
          Notation (JSON)</title>

          <author fullname="Douglas Crockford" initials="D"
                  surname="Crockford"></author>

          <date month="July" year="2006" />
        </front>

        <format target="http://tools.ietf.org/html/rfc4627" type="TXT" />
      </reference>

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement
          Levels</title>

          <author fullname="S. Bradner" surname="Bradner"></author>

          <date month="March" year="1997" />
        </front>

        <format target="http://www.ietf.org/rfc/rfc2119.txt" type="TXT" />
      </reference>

      <reference anchor="draft-uma-core">
        <front>
          <title>UMA 1.0 Core Protocol</title>

          <author fullname="Christian Scholz" initials="C" surname="Scholz"></author>

          <date month="December" year="2010" />
        </front>

        <format target="http://mrtopf.clprojects.net/uma/draft-uma-core.html"
                type="HTML" />
      </reference>
    </references>
  </back>
</rfc>
