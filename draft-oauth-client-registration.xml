<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
                "http://xml.resource.org/authoring/rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC ''
          'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY UMA PUBLIC ''
          'http://kantarainitiative.org/confluence/display/uma/Home'>
    <!ENTITY UMAreqs PUBLIC ''
          'http://kantarainitiative.org/confluence/display/uma/UMA+Requirements'>
]>

<rfc category='std' ipr='trust200902' docName='draft-oauth-dyn-reg-v1-00.txt'>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>
  <?rfc tocdepth='3' ?>
  <?rfc symrefs='yes' ?>
  <?rfc sortrefs='yes' ?>
  <?rfc compact='yes' ?>
  <?rfc subcompact='no' ?>
  <?rfc strict='yes' ?>

  <front>

    <title abbrev='OAuth Dynamic Client Registration'>OAuth Dynamic Client Registration Protocol</title>

    <author fullname='Christian Scholz' surname='Scholz' initials='C' role='editor'>
      <organization>COM.lounge GmbH</organization>
      <address>
        <email>cs@comlounge.net</email>
        <uri>http://comlounge.net/</uri>
      </address>
    </author>
    <author fullname='Maciej Machulak' surname='Machulak' initials='M'>
      <organization>Newcastle University</organization>
      <address>
        <email>m.p.machulak@ncl.ac.uk</email>
        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>    
    <author fullname='Eve Maler' surname='Maler' initials='E'>
      <organization>PayPal</organization>
      <address>
        <email>eve@xmlgrrl.com</email>
        <uri>http://www.paypal.com/</uri>
      </address>
    </author>

    <date year='2010' />

    <abstract>
      <t>
        This specification proposes an OAuth Dynamic Client Registration protocol.
      </t>
    </abstract>
  </front>

  <middle>

    <section title='Introduction'>
      <t>
        In some use-case scenarios it is desirable or necessary to allow OAuth clients to
        obtain authorization from an OAuth authorization server without the two parties
        having previously interacted. Nevertheless, in order for the authorization server
        to accurately represent to end-users which client is
        seeking authorization to access the end-user's resources, a method for automatic
        and unique registration of clients is needed.
      </t>
      <t>
        The goal of this proposed registration protocol is for an authorization server to provide a client with a
        client identifier and optionally a client secret in a dynamic fashion. To accomplish this,
        the authorization server must first be provided with
        information about the client, with the client-name being the minimal information
        provided. In practice, additional information will need to be furnished to
        the authorization server, such as the client's homepage, icon, description, and
        so on.
      </t>
      <t>
      The dynamic registration protocol proposed here is envisioned to be an additional
      task to be performed by the OAuth authorization server, namely registration of a new
      client identifier and optional secret, and the issuance of this information to
      the client. This task would occur prior to the point at which the client
      wields its identifier and secret at the authorization server in order to obtain an access
      token in normal OAuth fashion.
      </t>
      <t>
        This informal draft discusses a number of requirements for and approaches to
        automatic registration of clients to the OAuth authorization server, with special
        emphasis on the needs of the OAuth-based User-Managed Access protocol [[provide citation]].
      </t>

      <section title='Notational Conventions'>
        <t>
          The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD
          NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as
          described in <xref target='RFC2119' />.
        </t>
        <t>
          This document uses the Augmented Backus-Naur Form (ABNF) notation of
          <xref target='I-D.ietf-httpbis-p1-messaging' />. Additionally, the realm and auth-param
          rules are included from <xref target='RFC2617' />.
        </t>
        <t>
          Unless otherwise noted, all the protocol parameter names and values are case sensitive.
        </t>
      </section>

      <section title='Terminology'>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='resource server'>
              <vspace />
              A server capable of accepting and responding to protected resource requests.
            </t>
            <t hangText='resource owner'>
              <vspace />
              An entity capable of granting access to a protected resource.
            </t>
            <t hangText='client'>
              <vspace />
              An application obtaining authorization and making protected resource requests.
            </t>
            <t hangText='authorization server'>
              <vspace />
              A server capable of issuing tokens after successfully authenticating the resource
              owner and obtaining authorization. The authorization server may be the same server as
              the resource server, or a separate entity.
            </t>
            <t hangText='authorization manager'>
              <vspace />
              An UMA-defined variant of an authorization server that carries out an authorizing
              user's policies governing access to a protected resource.
            </t>
            <t hangText='end-user authorization endpoint'>
              <vspace />
              The authorization server's HTTP endpoint capable of authenticating the end-user and
              obtaining authorization. 
            </t>
            <t hangText='token endpoint'>
              <vspace />
              The authorization server's HTTP endpoint capable of issuing tokens and refreshing
              expired tokens. 
            </t>
            <t hangText='client identifier'>
              <vspace />
              An unique identifier issued to the client to identify itself to the authorization
              server. Client identifiers may have a matching secret. 
            </t>
            <t hangText='client registration endpoint'>
              The authorization server's HTTP endpoint capable of issuing client identifiers and optional client secrets.
            </t>
            
          </list>
        </t>
      </section>
    </section>
    <section title='Requirements'>
    <t>
        In addition to the following general requirements for dynamic client registration, the
        User-Managed Access (UMA) protocol seeks to optimize for the design principles and requirements
        found in the UMA Requirements document [[provide citation]], for example:
<list>
<t>
DP1: Simple to understand, implement in an interoperable fashion, and deploy on an Internet-wide scale
</t>
<t>
DP6: Able to be combined and extended to support a variety of use cases and emerging application functionality.
</t>
<t>
DP8: Avoid adding crypto requirements beyond what existing web app implementations do today.
</t>
<t>
DP10: Complexity should be borne by the authorization endpoint vs. other endpoints.
</t>
</list>
    </t>
    	    <section title='The client needs to be uniquely identifiable by the authorization server'>
    	      <t>
          		In order for an authorization server to do proper user-delegated authorization
              and prevent unauthorized access it must be able to identify clients uniquely.
              As is done today in OAuth, the client identifier (and optional secret) should
              thus be issued by the authorization server and not simply accepted as proposed by the client.
    	      </t>
    	    </section>

    	    <section title='The authorization server must be able to retrieve metadata about
          a client for later user interaction'>
    	      <t>
          		In order for the authorization server to describe a client to the end-user in an
              authorization step it needs information about the client. This can be the client
              name at a minimum, but today servers usually request at least a description, a
              homepage URL, and an icon when doing manual registration.
    	      </t>
    	    </section>
    	    <section title='The authorization server must have the option of strongly
          authenticating the client and its metadata'>
    	      <t>
          		In order to prevent spoofing of clients, the authorization server should have the
              option to verify the provided information. This might be
              solved using signature verification; relatively weaker authentication might be achieved in a
              simpler way by pulling metadata from a trusted client URL.
    	      </t>
    	    </section>
    	    <section title='Dynamic client registration must be possible from both web-server applications
          and native applications'>
    	      <t>
          		Native applications on (e.g.) mobile devices have special limitations, so alternative solutions
          		to meeting this set of requirements must be sought.
    	      </t>
    	      <t>
    	      In the UMA context, one type of dynamic client registration may be in a sub-process of a larger
    	      process where a requester (an enhanced type of OAuth client) approaches an authorization
    	      manager (an enhanced type of OAuth authorization server), without having interacted before, seeking an access
    	      token. The requester may be any kind of OAuth client; we anticipate that web servers and native
    	      applications are the most important kinds of client for which a dynamic registration solution
    	      will be sought.
    	      </t>
    	    </section>
    	    <section title='Transaction integrity must be ensured in large deployments where data
          propagation can be an issue'>
    	      <t>
          	  When a client sends information to a server endpoint, it might take time for this data 
          	  to propagate through big server installations that
              spread across various data centers. Care needs to be taken that subsequent interactions with the user after the
              registration process, such as an authorization request, show the correct data.
              </t>
              <t>
              In the UMA context, one type of dynamic client registration may be in a sub-process of a larger
              process where an authorizing user (an enhanced role for an OAuth end-user) introduces a host
              (an enhanced type of OAuth resource server)
              to an authorization manager (an enhanced type of OAuth authorization server) as a client
              of it. If this host has never "met" this authorization manager before, it must obtain a unique
              identifier to use there. Even though such an identifier is needed no matter which end-user
              caused the registration process to take place, the end-user may need to wait for the sub-process
              to finish in order to continue with the introduction and policy configuration process.
    	      </t>
    	    </section>
      </section>

    <section title='Analysis of Registration Flow Options'>
    	<t>
    	There are different approaches one can take to exchange client metadata
        for a client identifier and optional secret.
    	<list style='numbers'>
        <t>Providing client metadata on every request and not using a client identifier at all:
        In this approach all necessary client information like client_name or
        client_icon is passed on every request to the authorization server to display it to
        the user if necessary.  This option makes it more difficult to meet the first and second requirements
        since different
        clients could theoretically represent themselves to an authorization server with the same metadata
        and the same client could represent itself on subsequent visits with different metadata.
        Also, today's OAuth protocol requires the use of a client identifier. Because of the UMA
        simplicity principle we do not recommend this flow option and
        and have not provided a candidate solution.
        </t>
        <t>
        The client "pushes" its metadata to the authorization server, which returns
        the client identification information: In this approach the client discovers the registration endpoint of
        the authorization server and sends its metadata to that endpoint in (e.g.) JSON format. The
        authorization server answers with a client identifier and optional secret in the response.  This approach may be
        necessary in cases where the client is behind a firewall, but may have difficulty meeting
        the propagation requirement, since the metadata might be sent to a server far away from
        the server the end-user subsequently interacts with.
        Strong authentication of the client metadata is more difficult with this approach
        than with the next one, though not impossible. Further, this approach is problematic in
        the case of native applications that can't function as web servers.
    	</t>
    	<t>The authorization server "pulls" client metadata and returns client identification information: In this
    	approach the client sends only a URL to the authorization server, which then uses that
    	information to pull metadata about the client, e.g. via XRD, and returns identification information
    	in the response to the initial request. This approach most easily allows for strong
    	authentication of clients but still does not entirely solve the propagation issue, as the initial
    	URL push may be made to a server different from the one the end-user is interacting with.
    	</t>
    	</list>
    	</t>

    	<t>It seems impossible to specify a single registration flow that will satisfy all
    	requirements, deployment needs, and client types.  This document, therefore, presents as
    	small a variety of options as possible, organized according to client capabilities much as
    	OAuth's client profiles are.
    	</t>
    </section>
    
    <section title='Discovery of client registration endpoint'>
      <t>
         Regardless of flow option, the client needs to  discover the authorization server's client
         registration endpoint.
      </t>
      <t>
         The client MUST use the <xref target='RFC5785' /> and <xref target='I-D.hammer-hostmeta' /> discovery mechanisms to learn
         about the URI of the client registration endpoint at the authorization server at
         which the client wants to register. The authorization server MUST provide a
         host-meta document containing a Link element with a rel value of: <spanx
         style='verb'>http://oauth.net/as/registration</spanx>
      </t>
      <figure>
       <preamble>
         For example:
       </preamble>
       <artwork>
      <![CDATA[
      <XRD>
        <Host>http://server.example.com</Host>
        <Link rel="http://oauth.net/as/registration" 
              href="https://server.example.com/register">
            <Title>Client Registration Endpoint</Title>
        </Link>
      </XRD>
      ]]>
       </artwork>
      </figure>
    </section>
    
    <section title='Client Registration with Pushed Metadata'>
      <section title="Overview">
        <t>
          This registration flow is intended only for clients that do not support having an
          authorization server pull metadata from them, for example, web-server clients behind a firewall.
          It works as follows:
        </t>
        <t>
          <list style="numbers">
            <t>
                The client sends metadata to the client registration endpoint. The
                client MUST send its name, description, and redirection URI and MAY send a URI
                to its icon. The client MAY sign the metadata.
            </t>
            <t>
                The authorization server checks the data (verifying the signature as necessary) and
                returns a client identifier and an optional client secret.
            </t>
          </list>
        </t>
        
        <figure title='Client Registration Flow with Pushed Metadata' anchor='Figure-1'>
          <artwork>
            <![CDATA[
  +--------+                                  +---------------+
  | Client |--(A)--- Registration Request --->| Authorization |
  |        |         with Metadata            |     Server    |
  |        |                                  |               |
  |        |<-(B)----Registration Response ---|               |
  |        |         with Client ID Info      |               |
  +--------+                                  +---------------+
]]>
          </artwork>
        </figure>
        
      </section><!-- overview push-->
      
      <section title="Client Registration Request">
        <t>
          The client sends a JSON formatted document to the client registration endpoint.
          The client includes the following parameters in the request:
        </t>
        <t>
          <list style="hanging" hangIndent="6">
            <t hangText="type">
                <vspace />
                REQUIRED. This parameter must be set to "push". 
            </t>
            <t hangText="client_name">
                <vspace />
                REQUIRED. This field must contain the human-readable name of the client.
            </t>
            <t hangText="client_url">
                <vspace />
                REQUIRED. This field contains the URL of the homepage of the client.
            </t>
            <t hangText="client_desc">
                <vspace />
                REQUIRED. This field must contain the description of the client. 
            </t>            
            <t hangText="client_icon">
                <vspace />
                OPTIONAL. If given, this field contains a URL to an icon for the client.
            </t>
             <t hangText="redirect_url">
                <vspace />
                REQUIRED. This field contains the URL to which the authorization server should send its response.
                [[Must it use https?]]
            </t>
         </list>
        </t>
        <t>
          The client MAY include additional metadata in the request and the
          authorization server MAY ignore this additional information.
        </t>
        <t>
        [[Say something about how to sign the metadata, and how it can be verified.]]
        </t>
        <figure>
         <preamble>
           For example, the client might send the following request:
         </preamble>
         <artwork>
        <![CDATA[
    POST /register HTTP/1.1
    Host: server.example.com
    Content-Type: application/json

    {
      type: "push",
      client_name: "Online Photo Gallery",
      client_url:  "http://onlinephotogallery.com",
      client_desc: "Not only uploading, but also editing capabilities!",
      client_icon: "http://onlinephotogallery.com/icon.png",
      redirect_url: "https://onlinephotogallery.com/client_reg"
    }
        
        ]]>
         </artwork>
        </figure>
        <t>
          The parameters are included in the entity body of the HTTP request using the
          "application/json" media type as defined by [RFC4627]. The parameters are
          serialized into a JSON structure by adding each parameter at the highest
          structure level. Parameter names and string values are included as JSON strings.
        </t>
      </section> <!-- client push request -->
      <section title="Client Registration Response">
        <t>
          After receiving and verifying information received from the client, the
          authorization server issues the client identifier and an optional client secret,
          and constructs the response by adding the following parameters to the entity
          body of the HTTP response with a 200 status code (OK):
        <list style="hanging" hangIndent="6">
            <t hangText="client_id">
                <vspace />
                REQUIRED.
            </t>
             <t hangText="client_secret">
                <vspace />
                OPTIONAL.
            </t>
            <t hangText="issued_at">
                <vspace />
                OPTIONAL. Specifies the timestamp when the identifier was issued.
                The timestamp value MUST be a positive integer.  The value is expressed
                in the number of seconds since January 1, 1970 00:00:00 GMT.
            </t>
            <t hangText="expires_in">
                <vspace />
                OPTIONAL; if supplied, the <spanx style='verb'>issued_at</spanx> parameter
                is REQUIRED. Specifies the valid
                lifetime, in seconds, of the identifier. The value is represented in base 10 ASCII.
            </t>
       </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response using the
          "application/json" media type as defined by [RFC4627]. The parameters are
          serialized into a JSON structure by adding each parameter at the highest
          structure level. Parameter names and string values are included as JSON strings.
        </t>
        <t>
          The authorization server MUST include the HTTP <spanx
          style='verb'>Cache-Control</spanx> response header field with a value of
          <spanx style='verb'>no-store</spanx> in any response containing 
          <spanx style='verb'>client_secret</spanx>.
        </t>
            <figure>
             <preamble>
               For example, the authorization server might return the following response:
             </preamble>
             <artwork>
            <![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store

    {
      client_id: "5UO9XcL4TQTa",
      client_secret: ”WdRKN3zeTc20”
    }
            ]]>
             </artwork>
            </figure>
        
      </section> <!-- client registration response -->
      <section title="Error Message">
        <t>
            If the request for registration is invalid or unauthorized, the authorization
            server constructs the response by adding the following parameters to the
            entity body of the HTTP response with a 400 status code (Bad Request) using
            the “application/json” media type:
        </t>
        <t>
          <list style="symbols">
            <t>
              <spanx style='verb'>error</spanx> (REQUIRED)
            </t>
            <t>
              <spanx style='verb'>description</spanx> (OPTIONAL)
            </t>
          </list>
        </t>
        <figure>
         <preamble>
           An example error response (with line breaks for readability)
         </preamble>
         <artwork>
        <![CDATA[
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store

    {
    "error": "unauthorized_client",
    "description": "This client is not on the 
      white list of this Authorization Server"
    }
        ]]>
         </artwork>
        </figure>        
      </section><!-- error message -->
    </section><!-- push client registration -->
    <section title="Client Registration with Pulled Metadata">
      <section title="Overview">
        <t>
          This registration flow is intended generally for most clients, which are expected to support
          having an authorization server pull metadata from them, for example, web-server clients that are
          not behind a firewall, and instances of native-app clients that have a server-side application that
          functions as a "registration proxy" for them.  It works as follows:
        </t>
        <t>
          <list style="numbers">
            <t>
              The client sends its metadata URI to the client registration endpoint
            </t>
            <t>
              The authorization server uses the <xref target='RFC5785' /> and <xref target='I-D.hammer-hostmeta' /> discovery
              mechanisms on this URI to retrieve the host-meta document
              describing the client. The host-meta document MUST contain the client’s
              name, description, and redirection URI, and MAY contain a URI to the client’s
              icon.
            </t>
          </list>
        </t>
        <figure title='Client Registration Flow with Pulled Metadata' anchor='Figure-2'>
          <artwork>
<![CDATA[
  +--------+                                  +---------------+
  | Client |--(A)--- Registration Request --->| Authorization |
  |        |         with URL                 |     Server    |
  |        |                                  |               |
  |        |<-(B)--- Client Discovery --------|               |
  |        |                                  |               |
  |        |--(C)---- Host-Meta Document ---->|               |
  |        |                                  |               |
  |        |<-(D)--- Registration Response ---|               |
  |        |         with Client ID Info      |               |
  +--------+                                  +---------------+
]]>
          </artwork>
        </figure>
      </section><!-- overview -->
      
      <section title="Client Registration Request">
        <t>
          The client sends a JSON formatted document to the client registration endpoint.
          The client includes the following parameters in the request:
        </t>
        <t>
          <list style="hanging" hangIndent="6">
            <t hangText="type">
                <vspace />
                REQUIRED. This parameter must be set to "pull". 
            </t>
            <t hangText="client_url">
                <vspace />
                REQUIRED. This field contains the URL of the homepage of the client. 
            </t>
          </list>
        </t>
        
        <t>
          The client MUST NOT include other metadata parameters, such as those defined in the pushed-metadata scenario.
          [[Correct?  Need error condition for this?]]
        </t>
        
        <figure>
         <preamble>
           For example, the client might send the following request:
         </preamble>
         <artwork>
        <![CDATA[
    POST /register HTTP/1.1
    Host: server.example.com
    Content-Type: application/json

    {
      type: "pull",
      url: "http://onlinephotogallery.com"
    }

        ]]>
         </artwork>
        </figure>
        <t>
          The parameters are included in the entity body of the HTTP request using the
          "application/json" media type as defined by [RFC4627]. The parameters are
          serialized into a JSON structure by adding each parameter at the highest
          structure level. Parameter names and string values are included as JSON strings.
        </t>        
      </section>
      <section title="Client Discovery">
        <t>
          The authorization server evaluates this request and MAY perform a <xref
          target='RFC5785' /> and <xref target='I-D.hammer-hostmeta' /> discovery
          mechanism on the provided URL to the host-meta document for the client.
        </t>
        
        <figure>
         <preamble>
           For example:
         </preamble>
         <artwork>
        <![CDATA[
    GET /.well-known/host-meta HTTP/1.1
    Host: server.example.com
        ]]>
         </artwork>
        </figure>
        
        <t>
          The authorization server retrieves the host-meta document, which MUST contain:
        </t>
        <t>
          <list style="symbols">
            <t>
              A 
              <spanx style="verb">Property</spanx> 
              element with a 
              <spanx style="verb">type</spanx>
              value of
              <spanx style="verb">http://oauth.net/client/name</spanx>
              containing the human-readable client name.
              (REQUIRED)
            </t>
            <t>
              A 
              <spanx style="verb">Property</spanx> 
              element with a 
              <spanx style="verb">type</spanx>
              value of
              <spanx style="verb">http://oauth.net/client/description</spanx>
              containing the human readable description of the client.
              (REQUIRED)
            </t>
            <t>
              A 
              <spanx style="verb">Link</spanx> 
              element with a 
              <spanx style="verb">rel</spanx>
              value of
              <spanx style="verb">http://oauth.net/client/redirect_uri</spanx>
              (REQUIRED).
            </t>
            <t>
              A 
              <spanx style="verb">Link</spanx> 
              element with a 
              <spanx style="verb">rel</spanx>
              value of
              <spanx style="verb">http://oauth.net/client/uri</spanx>
              (REQUIRED).
            </t>            
            <t>
              A 
              <spanx style="verb">Link</spanx> 
              element with a 
              <spanx style="verb">rel</spanx>
              value of
              <spanx style="verb">http://oauth.net/client/icon</spanx>
              (REQUIRED). [[Make OPTIONAL, as in the push case?]]
            </t>
          </list>
        </t>
        <figure>
         <preamble>
           For example:
         </preamble>
         <artwork>
        <![CDATA[
    <XRD>
      <Host>http://onlinephotogallery.com</Host>
      <Property type="http://oauth.net/client/name">
        Online Photo Gallery
      </Property>
      <Property type="http://oauth.net/client/description">
        Not only uploading, but also editing capabilities!
      </Property>
      <Link rel="http://oauth.net/client/uri" 
            href="http://onlinephotogallery.com">
        <Title>Client URI</Title>
      </Link>
      <Link rel="http://oauth.net/client/redirect_uri" 
            href="https://onlinephotogallery.com/client_reg">
        <Title>Client Redirect URI</Title>
      </Link>
      <Link rel="http://oauth.net/client/icon" 
            href="http://onlinephotogallery.com/icon.png">
        <Title>Client Icon</Title>
      </Link>
    </XRD>
        ]]>
         </artwork>
        </figure>
      </section><!-- client discovery -->
      <section title="Client Registration Response">

        <t>
          After receiving and verifying information retrieved from the client, the
          authorization server issues the client identifier and an optional client secret,
          and constructs the response by adding the following parameters to the entity
          body of the HTTP response with a 200 status code (OK):
        </t>
        <t>
          <list style="symbols">
            <t>
              <spanx style='verb'>client_id</spanx> (REQUIRED)
            </t>
            <t>
              <spanx style='verb'>client_secret</spanx> (OPTIONAL)
            </t>
          </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response using the
          "application/json" media type as defined by [RFC4627]. The parameters are
          serialized into a JSON structure by adding each parameter at the highest
          structure level. Parameter names and string values are included as JSON strings.
        </t>
        
        <t>
          The authorization server MUST include the HTTP <spanx
          style="verb">Cache-Control</spanx> response header field with a value of <spanx
          style="verb">no-store</spanx> in any response containing the <spanx
          style="verb">client_secret</spanx>.
        </t>
        <figure>
         <preamble>
           For example the authorization server might return the following response:
         </preamble>
         <artwork>
        <![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store

    {
      "client_id":"5UO9XcL4TQTa",
      "client_secret":”WdRKN3zeTc20”
    }
        ]]>
         </artwork>
        </figure>
        
      </section>
      <section title="Unsuccessful Client Discovery">
        <t>
          If the host-meta discovery was not successful, the authorization server
          constructs the response by adding the following parameters to the entity body of
          the HTTP response with a 404 status code (Not Found) using the
          <spanx style="verb">application/json</spanx> media type:
        </t>
        <t>
          <list style="symbols">
            <t>
              <spanx style='verb'>error</spanx> (REQUIRED). This parameter must be set to 
              <spanx style='verb'>hostmeta_error</spanx>
            </t>
            <t>
              <spanx style='verb'>description</spanx> (OPTIONAL)
            </t>
          </list>
        </t>
        <figure>
         <preamble>
           An example error response (with line breaks for readability)
         </preamble>
         <artwork>
        <![CDATA[
    HTTP/1.1 404 Not Found
    Content-Type: application/json
    Cache-Control: no-store

    {
    "error": "hostmeta_error",
    "description": "The hostmeta document could 
        not have been retrieved from the URL."
    }
        ]]>
         </artwork>
        </figure>        
        
        
      </section>
      <section title="Error Message">
        <t>
            If the request for registration is invalid or unauthorized, the authorization
            server constructs the response by adding the following parameters to the
            entity body of the HTTP response with a 400 status code (Bad Request) using
            the “application/json” media type:
        </t>
        <t>
          <list style="symbols">
            <t>
              <spanx style='verb'>error</spanx> (REQUIRED)
            </t>
            <t>
              <spanx style='verb'>description</spanx> (OPTIONAL)
            </t>
          </list>
        </t>
        <figure>
         <preamble>
           An example error response (with line breaks for readability)
         </preamble>
         <artwork>
        <![CDATA[
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store

    {
    "error": "unauthorized_client",
    "description": "This client is not on the 
      white list of this Authorization Server"
    }
        ]]>
         </artwork>
        </figure>        
      </section><!-- error message -->
      
    </section><!-- pull client registration -->
    
    <section title='Security Considerations'>
      <t>
      [[TBS: Thomas has suggested we include the merits of pull over push and the vulnerabilities in the native-app scenario here.]]
      </t>
    </section>

    <appendix title='TODOs'>
      <t>
        <list style="symbols">
          <t>
            How would signing work in push and pull cases?
          </t>
          <t>
            How is the propagation requirement now solved? Is this a problem at all?
          </t>
           <t>
            Add a type of "proxy_pull" for the native-app-initiated use case?
          </t>
          <t>
            Need to mention that in the push and pull cases the URL/metadata is being POSTed.
            Also require that the registration endpoint uses HTTPS?
          </t>

       </list>
      </t>
    </appendix>
    <appendix title='Acknowledgements'>
      <t>
        <list style="symbols">
          <t>
            Thomas Hardjono
          </t>
          <t>
            George Fletcher
          </t>
          <t>
            Nat Sakimura
          </t>
        </list>
        [[ Add further WG contributors ]]
      </t>
    </appendix>

    <appendix title='Document History'>
      <t>
        [[ to be removed by RFC editor before publication as an RFC ]]
      </t>
    </appendix>

  </middle>

  <back>

    <references title='Normative References'>
    
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5785.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-hammer-hostmeta-13.xml'?>
      
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p1-messaging-09.xml'?>

<!--

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3023.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>
-->
    </references>

  </back>

</rfc>